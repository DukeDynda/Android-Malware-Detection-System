package com.example.kevinwu.project;

import java.util.ArrayList;

/**
 * Created by siqi zhang on 5/21/2016.
 */
public class NaiveBayes
{
    //pre-processed clusters
    private ArrayList<Cluster> innocent = new ArrayList<Cluster>();
    private ArrayList<Cluster> malicious = new ArrayList<Cluster>();
    //build naive bayes probabilistic table
    ArrayList<Double> inno_yes = new  ArrayList<Double>();
    ArrayList<Double> inno_no = new  ArrayList<Double>();
    ArrayList<Double> mali_yes = new  ArrayList<Double>();
    ArrayList<Double> mali_no = new  ArrayList<Double>();
    //Number of innocent data
    private static int NUM_INNO_POINTS = 0;
    //Number of malicious data
    private static int NUM_MALI_POINTS = 0;

    public NaiveBayes(ArrayList<Cluster> innocent,  ArrayList<Cluster> malicious, int num_inno, int num_mali)
    {
        this.innocent = innocent;
        this.malicious = malicious;
        this.NUM_INNO_POINTS = num_inno;
        this.NUM_MALI_POINTS = num_mali;
        //go through the innocent clusters
        for(int i = 0; i < innocent.size(); i++)
        {
            double yes_probability = (double)innocent.get(i).points.size() / NUM_INNO_POINTS;
            inno_yes.add(yes_probability);
            inno_no.add(1 - yes_probability);
        }
        //go through the malicious clusters
        for(int i = 0; i < malicious.size(); i++)
        {
            double yes_probability = (double)malicious.get(i).points.size() / NUM_MALI_POINTS;
            mali_yes.add(yes_probability);
            mali_no.add(1 - yes_probability);
        }
    }
    //make a prediciton based on the permission list
    public boolean isMalicious(ArrayList<Double> permission)
    {
        //probability of being malicious
        double mali_prob = 1;
        //probability of being innocent
        double inno_prob = 1;
        //look at each permission in the permission array
        for(int i =0;i < permission.size();i++)
        {
            //only multiply the probability when both innocent and malicious probability are not zero
            if(inno_yes.get(i) != 0 && mali_yes.get(i) != 0)
            {
                //does not have the permission
                if(permission.get(i) == 0.0)
                {
                    inno_prob*= inno_no.get(i);
                    mali_prob*= mali_no.get(i);
                }
                else
                {
                    inno_prob*= inno_yes.get(i);
                    mali_prob*= mali_yes.get(i);
                }
            }
        }
        //compare
        if(mali_prob >= inno_prob)
            return true;
        else
            return false;
    }
}
